{"version":3,"sources":["../src/index.ts"],"names":["flattenInlineCascadeChoices","choices","endLevel","results","traverse","path","level","str","choice","index","cStr","name","cLevel","cPath","subChoices","push","forEachCascadeChoices","cb","startLevel"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAIO,IAAMA,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,OAAD,EAAeC,QAAf,EAAqC;AAC9E,MAAMC,OAAc,GAAG,EAAvB;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACH,OAAD,EAAeI,IAAf,EAA8BC,KAA9B,EAA8CC,GAA9C,EAAoE;AACnF,yBAAQN,OAAR,EAAiB,UAACO,MAAD,EAASC,KAAT,EAAmB;AAClC,UAAMC,IAAI,GAAG,CAAC,yBAAYH,GAAZ,CAAD,GAAoBA,GAAG,GAAG,GAAN,GAAYC,MAAM,CAACG,IAAvC,GAA8CH,MAAM,CAACG,IAAlE;AACA,UAAIC,MAAM,GAAG,CAAC,yBAAYN,KAAZ,CAAD,GAAsBA,KAAtB,GAA8B,CAA3C;AACA,UAAMO,KAAK,GAAG,CAAC,yBAAYR,IAAZ,CAAD,aAAwBA,IAAxB,yBAA2CI,KAA3C,oBAA0DA,KAA1D,MAAd;;AAEA,UAAI,CAAC,qBAAQD,MAAM,CAACM,UAAf,CAAD,KAAgC,yBAAYZ,QAAZ,KAA0B,CAAC,yBAAYA,QAAZ,CAAD,IAA0BU,MAAM,GAAGV,QAA7F,CAAJ,EAA6G;AAC3GU,QAAAA,MAAM;AACN,eAAOR,QAAQ,CAACI,MAAM,CAACM,UAAR,EAAoBD,KAApB,EAA2BD,MAA3B,EAAmCF,IAAnC,CAAf;AACD;;AAEDP,MAAAA,OAAO,CAACY,IAAR,CAAa;AAAEJ,QAAAA,IAAI,EAAED,IAAR;AAAcF,QAAAA,MAAM,EAAE,uBAAUA,MAAV,CAAtB;AAAyCH,QAAAA,IAAI,EAAEQ;AAA/C,OAAb;AACD,KAXD;AAYD,GAbD;;AAeAT,EAAAA,QAAQ,CAACH,OAAD,CAAR;AACA,SAAOE,OAAP;AACD,CAnBM;AAqBP;;;;;;;AAGO,IAAMa,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCf,OADmC,EAEnCgB,EAFmC,EAKhC;AAAA,MAFHC,UAEG,uEAFkB,CAElB;AAAA,MADHhB,QACG;AACH,uBAAQD,OAAR,EAAiB,UAACO,MAAD,EAASC,KAAT,EAAmB;AAClCQ,IAAAA,EAAE,CAACT,MAAD,EAASU,UAAT,EAAqBT,KAArB,CAAF;;AACA,QAAI,CAAC,qBAAQD,MAAM,CAACM,UAAf,CAAL,EAAiC;AAC/B,UAAIZ,QAAQ,IAAIgB,UAAU,IAAIhB,QAA9B,EAAwC;AACtC;AACD;;AAEDc,MAAAA,qBAAqB,CAACR,MAAM,CAACM,UAAR,EAAoBG,EAApB,EAAwBC,UAAU,GAAG,CAArC,EAAwChB,QAAxC,CAArB;AACD;AACF,GATD;AAUD,CAhBM","sourcesContent":["import { isEmpty, forEach, isUndefined, cloneDeep } from 'lodash'\n\n/*\n * Retrun new array\n * Not mutates original choices\n */\nexport const flattenInlineCascadeChoices = (choices: any, endLevel?: number) => {\n  const results: any[] = []\n  const traverse = (choices: any, path?: string, level?: number, str?: string): any => {\n    forEach(choices, (choice, index) => {\n      const cStr = !isUndefined(str) ? str + '-' + choice.name : choice.name\n      let cLevel = !isUndefined(level) ? level : 1\n      const cPath = !isUndefined(path) ? `${path}.subChoices[${index}]` : `[${index}]`\n\n      if (!isEmpty(choice.subChoices) && (isUndefined(endLevel) || (!isUndefined(endLevel) && cLevel < endLevel))) {\n        cLevel++\n        return traverse(choice.subChoices, cPath, cLevel, cStr)\n      }\n\n      results.push({ name: cStr, choice: cloneDeep(choice), path: cPath })\n    })\n  }\n\n  traverse(choices)\n  return results\n}\n\n/*\n * For each choice\n */\nexport const forEachCascadeChoices = (\n  choices: any,\n  cb: (choice: any, currentlevel?: number, currentIndex?: string) => void,\n  startLevel: number = 1,\n  endLevel?: number\n) => {\n  forEach(choices, (choice, index) => {\n    cb(choice, startLevel, index)\n    if (!isEmpty(choice.subChoices)) {\n      if (endLevel && startLevel >= endLevel) {\n        return\n      }\n\n      forEachCascadeChoices(choice.subChoices, cb, startLevel + 1, endLevel)\n    }\n  })\n}\n"],"file":"index.js"}